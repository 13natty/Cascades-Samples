/****************************************************************************
**
** Copyright (C) 2012 Research In Motion Limited.
** All rights reserved.
** Contact: Research In Motion Ltd. (http://www.rim.com/company/contact/)
**
** This file is part of the examples of the BB10 Platform.
**
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Research In Motion Limited.
**
****************************************************************************/

/*!
    \page custommapview
    \example custommapview
    \title Custom Map View Example

    \section1 Description

    The Custom Map View example displays a city map overlayed with three sliders that allow
    you to control altitude, tilt and heading. On top of this it demonstrates its main 
    feature, which is the ability to put an overlay on another control and draw Controls
    on top of that.

    \image custommapview-example.png
    \image custommapview-example1.png
    \image custommapview-example2.png

    \section1 Overview
    In this example we'll learn how to use the \c MapView class of the BB10
    framework to change altitude, tilt and heading as well as dropping push pins using \c MapData.

    \section1 The UI
    The UI of this sample application consists of a page with a MapView, several actions such as "Drop Pin", 
    "Remove Pins", and some geographical location choices.

    \snippet custommapview/assets/main.qml 0

    These actions provide ways to manipulate the map view by dropping pins, clearing them or going to a specific location such as
    Manhattan. These manipulations are done through longitude, latitude and x,y calculations to drop them in the user focused area.

    \snippet custommapview/assets/main.qml 1

    The MapView element is set to the Waterloo, Ontario latitude,longitude location by default. The markers (Pin locations) x,y positions
    are updated by invoking the updateMarkers javascript method, whenever the onRequestRender() signal is emitted.

    \snippet custommapview/assets/main.qml 2

    Displays the status of the MapView element, such as current atlitude, tilt or latitude, longitude updates and some user actions.
    
    \snippet custommapview/assets/main.qml 3
    \snippet custommapview/assets/main.qml 4

    The Container that encapslates a compass image and \c ToggleButton. This allows us to show the compass positioning and the current
    map latitude/longitude of your gps location.

    \snippet custommapview/assets/main.qml 5

    The \c RotationSensor is used to determine the map tilt based on your handhelds rotation around the x-axis/y-axis.

    \snippet custommapview/assets/main.qml 6
    
    The \c PositionSource is used to update the graphical map pin that represents your current location when your position is changing.

    \section1 MapViewDemo
    
    This class deals with the adding and updating of location data for the MapData graphical elements.

    \snippet custommapview/src/MapViewDemo.cpp 0

    Inside the constructor of the class we create a seperate DataProvider to contain our current location. The reason for this is to
    seperate the provider containing our location from the default one that contains other location elements we decide to add on the map,
    so that it may be easier to clear these markers without clearing our location. We also create the \c Marker which will represent the
    graphical current position on the map, which is added to the this DataProvider.

    \snippet custommapview/src/MapViewDemo.cpp 1

    The addPinAtCurrentMapCenter method creates \c GeoLocation instances, with set latitude/longitude values, and corresponding graphical
    \c Marker's to graphically represent the current map center. By adding this to the default MapData, they show up on in our MapView.

    \snippet custommapview/src/MapViewDemo.cpp 2
	
    The clearPins() method illustrates how to remove all the \c Marker's associated with a perticular \c DataProvider. You can group your
    Marker's with different DataProvider's to be able to manipulate subsets of Marker's depending on functionality.

*/
