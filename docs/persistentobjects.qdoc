/****************************************************************************
**
** Copyright (C) 2012 Research In Motion Limited.
** All rights reserved.
** Contact: Research In Motion Ltd. (http://www.rim.com/company/contact/)
**
** This file is part of the examples of the BB10 Platform.
**
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Research In Motion Limited.
**
****************************************************************************/

/*!
    \page persistentobjects
    \example persistentobjects
    \title Persistent Objects Example

    \section1 Description

    The persistent object example demonstrates the various stages, create/load/write/update,
    of a persistent object that can be saved either to a file or to a \c QSettings object. 

    \image persistentobjects-example.png
    \image persistentobjects-example1.png
    \image persistentobjects-example2.png
    \image persistentobjects-example3.png

    \section1 Overview
    In this example we'll learn how to create persistent objects, either through \c QSettings or
    a file, update them, load them and delete them.

    \section1 UI
    The UI of this sample application is very simplistic, made up of four Tab's that represent each
    of the persistent object stages, such as "List", "Create", "Update" and "Delete".

    The business logic of the application is encapsulated in the "app" class, which provides the various
    invokable methods for each one of these actions. However, the storage logic can be found in the SettingsStorage,
    and FileStorage classes.

    \snippet persistentobjects/assets/main.qml 0

    Each of these Tab's provides an interface to invoke one of the methods that was exposed through the 
    _app instance that was introduced into the qml context using setContextProperty().
    Each Tab references the custom component related to it's action, i.e create => CreatePage.qml.

    \snippet persistentobjects/assets/CreatePage.qml 0

    The create container that provides Name TextField's and a "Create" Button for creating a person object.

    \snippet persistentobjects/assets/DeletePage.qml 0
 
    The delete container that provides object ID TextField and "Delete/Delete All" Buttons for deleting a person by ID or all person object(s).

    \snippet persistentobjects/assets/ListPage.qml 0

    This page has a \c DropDown for selecting the type of persistent storage the app is to use. This \c Control is followed
    by a \c Container that provides a \c ListView using \c StandardListItem to display Person object(s) and a "Refresh" Button 
    for retrieving the Person object(s) for display.

    \snippet persistentobjects/assets/UpdatePage.qml 0

    The update container provides object ID, first/last name TextField's and a "Update" Button for updating the Person object that
    corresponds to the given ID.

    \section1 App

    This app class contains the business logic dealing with the Person instance(s) and the different types of storage.

    \snippet persistentobjects/src/app.cpp 0

    The constructor intitializes the instance variables with default values, and creates the qml document as well as setting
    the application scene to the created \c AbstractPane which stems from the document.

    \snippet persistentobjects/src/app.cpp 1
    \snippet persistentobjects/src/app.cpp 4

    The update function, when invoked, generates a object ID(could be based on last ID loaded from storage, if one existed), creates a Person object 
    with this ID, adds it to the \c GroupDataModel and saves the object using the selected storage.

    \snippet persistentobjects/src/app.cpp 4

    These functions manipulate the data model by updating their Person object(s) or deleting them, but whenever changes occur to the object(s) in the
    model it is saved to the selected storage location.

    \snippet persistentobjects/src/app.cpp 2
    \snippet persistentobjects/src/app.cpp 3

    The following refreshes the data model with persistent objects, if ones exist, by invoking the load() member function. The load function
    in turn invokes the storage->load() function to re-load the data model with all the Person objects from the selected storage type. This
    function is mainly called when the user switches between storage types.

    \snippet persistentobjects/src/app.cpp 5

    This function changes the current storage type by deleting the pointer to the previous one and creating the newly selected storage instance.
    Afterwards, it calls the refreshObjects() function in order to populate the data model with the persistent objects, if any exist, that were
    found in the storage.

    \section1 Storage

    \snippet persistentobjects/src/Storage.hpp 0

    This is a base class from which all the storage type classes stem from, which enforces common member functions as a java interface would.

    \section1 SettingsStorage

    This class represents the type of storage based on a \c QSettings instance.

    \snippet persistentobjects/src/SettingsStorage.cpp 0

    This function saves the current state of the \c GroupDataModel to the QSettings instance, by saving the last Person ID under the "PersonList_LastCustomerID"
    key. In order to store the Person object(s), the QSettings provides a beginWriteArray() function which allows us to write the objects under
    the "PersonList" key as a type of array, which can later be read back using beginReadArray().
    
    \snippet persistentobjects/src/SettingsStorage.cpp 1
    \snippet persistentobjects/src/SettingsStorage.cpp 2

    These functions allow for loading the persistent objects from the settings instance, by retrieving the last object ID, and reading
    in all the Person object(s) using the beginReadArray() function provided by \c QSettings. Each array index is traversed, which is represented as
    a subkey under the key that the array was stored:
  
       ...
       PersonList/2/firstName
       PresonList/3/lastName
       ...

   \section1 FileStorage

   This class represents the type of storage based on a file to which Person object(s) are serialized or deserialized to.

   \snippet persistentobjects/src/FileStorage.cpp 0

   This member function serializes all the Person object(s) in the data model to a file. The serialization is done using a
   \c QDataStream, the first value to be written independantly of the objects is the last object ID used; afterwards, the
   Person object(s) are serialized, by writing the object members values, sequentially.

   \snippet persistentobjects/src/FileStorage.cpp 1

   The load() function deserializes all the Person object(s) form the storage file and restores them into the data model. Once again
   the deserialization is done using a \c QDataStream, recaping the serialization process we know that the first value of the stream
   is the ID of the last object that was saved. After reading in the "last object ID", the Person object(s) are read in sequentially by
   reading the object member values in the same order that they were written to. The read/write order is very important to maintain for
   serialization/deserialization to work properly.
*/
