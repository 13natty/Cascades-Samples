/****************************************************************************
**
** Copyright (C) 2013 Research In Motion Limited.
** All rights reserved.
** Contact: BlackBerry Ltd. (http://www.blackberry.com/company/contact/)
**
** This file is part of the examples of the BB10 Platform.
**
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Research In Motion Limited.
**
****************************************************************************/

/*!
    \page xandos
    \example xandos
    \title XandOs Example

    \section1 Description

    The XandOs example demonstrates how to launch a headless service and communicate with it using
	a UI counterpart.

    \image xandos-example.png
    \image xandos-example1.png
    \image xandos-example2.png
    \image xandos-example3.png


    \section1 Overview
    In this sample, we demonstrate headless services using the classic game of tic-tac-toe. The players moves
	are communicated to the service, which is the droid player in this instance, and it communicates it's choice
	back to the gameboard using socket communication.

    \section1 UI
    The UI of this sample application consists of some labels that display the user/droid winning scores,
    followed by an image for the game grid and images for the game sprites.

    The business logic of the application is encapsulated in the xandos component
    which is exposed as "_xandos" to the UI.

    \snippet xandos/assets/main.qml 0

    The following global variables are used to store the winning game scores for each player, these counters
    get incremented every time a won() signal is received per player. In addition a gameEnabled variable is 
    used to enable or disable the game pending if a droid connection is made. This is to prevent the user player
    from going out of sync with the droid.

    \snippet xandos/assets/main.qml 1

    The following containers with their associated \c Label's are used to display the winning scores for each
    player.

    \snippet xandos/assets/main.qml 2

    These \c ImageView 's are used to display the game grid. The default grid is used in between game starts when
    the players are not ready yet. The other grid, which is distinct from the default one only by color, is used
    to indicate that the droid player has been connected and is ready to play.
    
    \snippet xandos/assets/main.qml 3
    
    The following \c Container 's with their associated images represent the grid cells, with the first \c Container being
    the first grid row, the second being the second grid row and so on. Each of the ImageView represent one cell in the
    grid, with the default image being a blank (meaning no selection has been made). When an onTouch event occurs, we
    verify first that the cell was not marked previously and we change it to the players sprite image.
    
    \snippet xandos/assets/main.qml 5
    
    This \c SystemDialog is used at the start of the application to inquire the user if he wishes to play the game, upon
    pressing the confirmation button we get the game ready by starting the droid through socket communication.
    
    \snippet xandos/assets/main.qml 6
    
    The following \c SystemDialog is used to inform which player has won or if the game was a tie, and to query the user
    if he/she wiches to continue playing. The text for this dialog is set by the playerWon() javascript function which is
    invoked when the won() signal is received, which indicates which player has won or if the game was a tie.
    
    \snippet xandos/assets/main.qml 7
    
    This function is invoked when the won() signal is received. The function increments the winning counters based on the player
    that won and changes the above mantioned dialog text.
    
    \snippet xandos/assets/main.qml 8
    
    The clearGrid() function clears the grid before each new game.

    \snippet xandos/assets/main.qml 9
    
    The droidStart() function is invoked when a droidReady() signal is received which indicates that the droid connection
    has been established and the droid is ready to play.
 
    \section1 xandos
    This class represents the central business logic for the game mechanism. Providing functionality to keep game states in-sync
    with it's droid counterpart, and updating of the game matrix to represent the current game state.
    
    \snippet xandos/src/xandos.hpp 0
    
    This is the game grid matrix which consists of all the winning possibilites for each cell. Each winning matrix follows the
    {D1,H1,H2,H3,V1,V2,V3,D2,S} layout, which represents if the cell has the possibility to win in the diagnol, horizontal, vertical
    or a combination of the rows. The last index (S), is a flag indicator to communicate if the matrix has been selected already or not.
    
    \snippet xandos/src/xandos.cpp 0
    
    The default constructor initializes it's member variables, and the game matrix to start of game. It makes the necessary signal/slot
    connections to be informed of successful socket connection to the droid. It also initializes the invocation manager which is used
	to start or stop the droid, which translates to starting/terminating the headless service.
    
    \snippet xandos/src/xandos.cpp 1
    
    The select() method is used to mark the player selection by chosing the grid matrix at some chosen index and performing the
    row operation on the game matrix. The operation depends on the player, if it's the user than row addition is performed otherwise
    row subtraction. Each player tries to achieve a 3 or -3 value in any of the game matrix indexes in order to win the game. Once a
    win or tie game is determined, the won() signal is emitted. The select() method can also send the selection to the droid in order
    to update it's game matrix, this "send" paramter can be disabled when the user updates it's game matrix with droid selections where
    communication with droid is not necessary.
    
    \snippet xandos/src/xandos.cpp 2
    
    The following set of methods: droidStart() and droidStop() are used in order to start or terminate the headless service, also known
	as the xandos droid. These methods use the invocation mechanism by sending specific actions to the bound target id. For more information
	on this framework please reference "App integration" under "platform features" in the Documentation.
    
    \snippet xandos/src/xandos.cpp 3
    
    The droidSelection() method retrieves the \c ImageView associated with the droids grid cell choice and sets the images source to
	the sprite image that is associated with the droid.
    
    \snippet xandos/src/xandos.cpp 4
    
    noMoreSelections() is a private convenience method to check the grid matrix if there are no more selections available, which
    signifies a tied game if no player has reached the winning state in the game matrix by this time.
    
    \snippet xandos/src/xandos.cpp 6
	
	\section1 droidlistener
	The droidlistener class serves as the server socket which communicates with the headless service(Droid) connections and facilitates data
    transfers.

	\snippet xandos/src/droidlistener.hpp 0
    
    The default constructor creates the \c QTcpServer socket and readies it for any client connections by connecting
    to the signal/slot mechanism.
    
    \snippet xandos/src/droidlistener.cpp 0
    
    The listen() method initiates the server socket to start listenening for any client connections.
    
    \snippet xandos/src/droidlistener.cpp 1
    
    The newConnection() method is invoked when a connection is initiated, it grabs the new connection and readies it for
    data reads by connecting the related methods through the signals/slots mechanism.
    
    \snippet xandos/src/droidlistener.cpp 2
    
    The readyRead() method is invoked when the socket is ready to receive data transfers, it than forwards the data
    by emitting the droidSelection() signal with the data as it's parameter. The readyWrite() is used in the opposite way
	to write data to the socket when requested.
    
    \snippet xandos/src/droidlistener.cpp 3
    
    The disconnected() method is invoked when the socket signals the clients disconnection and the appropriate cleanup is taken.
    
    \snippet xandos/src/droidlistener.cpp 4
    
	
	\section1 xandosdroid
	
	The XandOsDroid example demonstrates how to create a headless service and communicate with it's UI counterpart. The emphasis is
	placed on communication since the headless service needs to keep it's game state in-sync with the UI's game state.
    Make note that this is NOT a standalone, independantly deployable application, it is packaged with xandos sample
    and deployed via it's bar file.
	
	\section1 Droid Overview
    In this sample, there is no UI portion since a headless service cannot have one. We represent the same game board 
    that it's UI counterpart is using and keep them in-sync through communicating their selections.
	
	\snippet xandosdroid/src/xandosdroid.hpp 0
	
	This is the same type of matrix, exact duplicate, that is found in xandos in order to keep the gameboard states in sync in both
	the UI and droid process'.
	
	\snippet xandosdroid/src/xandosdroid.cpp 0
	
	The default constructor initializes it's member variables, including the game matrix instantiation to start of game. Also the
	invocation manager is initialized, signal/slot connections made in order to receive the invocation action requests from the system
	or the xandos app.
    
    \snippet xandosdroid/src/xandosdroid.cpp 1
	
	onInvoked() method is called when a invoke request comes in, at which time it retrieves the requested action to be taken. The actions
	that are supported are either START or STOP, which behave respectfully as their names imply. When a START action is received the droid
	initializes communication with the UI app; however, it terminates all connections including the droid service when a STOP action is received.
	
	\snippet xandosdroid/src/xandosdroid.cpp 2
	
	The select() method is used to mark either players selection by chosing the grid matrix at some chosen index and performing the
    row operation on the game matrix. The operation depends on the player, if it's the user than row addition is performed otherwise
    row subtraction. Each player tries to achieve a 3 or -3 value in any of the game matrix indexes in order to win the game. Once a
    won game is determined, the droid is terminated.
    
    \snippet xandosdroid/src/xandosdroid.cpp 3
	
	availableChoices() method returns all the grid choices that have not been selected yet. This can be filtered further by indicating
    an specific index that you are looking for using the index parameter. Specifying a valid index will result in a choices list representing
    all the matrices that have a win possibility for that index which correlates to one of {D1,H1,H2,H3,V1,V2,V3,D2}.
    
    \snippet xandosdroid/src/xandosdroid.cpp 4
	
	The nextMove() method is used to analyse the game matrix to see if the opponent has any 2 sequences to prevent a user win, or if the droid
    has any 2 sequences to get a winning combination with the next move. If none of the above mentioned priorities are found, than it finds all the
    opponents moves and chooses at random which one to block with it's next move.
    
    \snippet xandosdroid/src/xandosdroid.cpp 6
	
	The connectToServer(), connected(), readyRead() and disconnected() are related to the socket communication between the droid and the UI. The connectToServer()
	method initializes a QTcpSocket connection to the UI socket server, once connection is made it emits a connected signal which is bound to and invokes the connected() slot.
	The connected() slot writes out data over the socket, the data being the droids next move selection on the game grid. When the socket receives data from the UI, the
	readyRead() method is invoked, which then proceeds to retrieve the data, representing the user grid cell selection, and marks it's grid state with that selection to keep in-sync.
	The disconnected() method is invoked when the socket connection is dropped or terminated, which calls the application quit method to terminate the service.
	
	\snippet xandosdroid/src/xandosdroid.cpp 5
*/
